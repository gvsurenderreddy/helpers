#!/bin/sh
#
# $Id$
#

# manageBE [activate|create|delete|list|src-upgrade|freebsd-update|freebsd-upgrade] {params}

if [ `uname -r |cut -d '.' -f1` -lt "8" ]; then
    echo "Sorry, only FreeBSD starting with 8.0 is supported."
fi

type=$1

mgm="manageBE"
usage_activate="Usage: ${mgm} activate -n <BE> -p <pool>"
usage_create="Usage: ${mgm} create -n <newBE> -s <sourceBE> -p <pool>"
usage_delete="Usage: ${mgm} delete -n <BE> -p <pool> -o [yes|no]"
usage_src_upgrade="Usage: ${mgm} src-upgrade -n <BE> -p <pool>"
usage_freebsd_update="Usage: ${mgm} freebsd-update -n <BE> -p <pool>"
usage_freebsd_upgrade="Usage: ${mgm} freebsd-upgrade -n <BE> -p <pool> -r <release>"
not_supported="Sorry, your FreeBSD version does not support this option"

error_delete="If filesystem has dependent clones, please promote them via 'zfs promote <filesystem>' and re-run ${mgm} delete"

# define our bail out shortcut
exerr () { echo -e "$*" >&2 ; exit 1; }

check_for_be_existence () {
    be_status=`/sbin/zfs list -H -o freebsd:boot-environment ${pool}/ROOT/${bootfs} 2> /dev/null` 
    if [ "${be_status}" != "1" ]; then
        echo "Sorry, ${bootfs} is no valid boot-environment"
        exit
    fi
}

case ${type} in
    activate)
        # activate a boot-environment

        shift; while getopts :n:p: arg; do case ${arg} in
            n) bootfs=${OPTARG};;
            p) pool=${OPTARG};;
            ?) exerr ${usage_activate};;
        esac; done; shift $(( ${OPTIND} - 1 ))

        [ "${bootfs}" -a "${pool}" ] || exerr ${usage_activate}

        check_for_be_existence

        old_bootfs=`/sbin/zpool list -H -o bootfs ${pool} |/usr/bin/sed s:^$pool/ROOT/::`
        /sbin/zpool set bootfs=${pool}/ROOT/${bootfs} ${pool}

        for filesystem in `/sbin/zfs list -H -o name -t filesystem -r ${pool}/ROOT/${bootfs}`; do
          /sbin/zfs promote ${filesystem}
        done
    ;;
    create)
        # create a boot-environment

        shift; while getopts :n:s:p: arg; do case ${arg} in
            n) new_bootfs=${OPTARG};;
            s) bootfs=${OPTARG};;
            p) pool=${OPTARG};;
            ?) exerr ${usage_create};;
        esac; done; shift $(( ${OPTIND} - 1 ))

        [ "${new_bootfs}" -a "${pool}" ] || exerr ${usage_create}
        
        if [ -z "${bootfs}" ]; then
            bootfs=`/sbin/zpool list -H -o bootfs ${pool} | /usr/bin/sed s:${pool}/ROOT/::`
        fi

        check_for_be_existence

        # create snapshot of the source BE and clone the snapshot to create the new BE
        /sbin/zfs snapshot -r ${pool}/ROOT/${bootfs}@${new_bootfs}
        /sbin/zfs clone ${pool}/ROOT/${bootfs}@${new_bootfs} ${pool}/ROOT/${new_bootfs}

        # clone the children snapshot to create the new BE children, mark the filesystem as not being BEs
        for filesystem in `/sbin/zfs list -H -o name -t filesystem -r ${pool}/ROOT/${bootfs} | /usr/bin/sed s:${pool}/ROOT/${bootfs}:: | /usr/bin/sed s:^/:: | /usr/bin/xargs`; do
          /sbin/zfs clone ${pool}/ROOT/${bootfs}/${filesystem}@${new_bootfs} ${pool}/ROOT/${new_bootfs}/${filesystem}
          /sbin/zfs set freebsd:boot-environment=0 ${pool}/ROOT/${new_bootfs}/${filesystem}
        done

        # mark the BE as boot-environment and mount the freebsd-update dir in the correct path
        /sbin/zfs set freebsd:boot-environment=1 ${pool}/ROOT/${new_bootfs}

        grep -v '^vfs.root.mountfrom' /boot/loader.conf > /${pool}/ROOT/${new_bootfs}/boot/loader.conf
        echo vfs.root.mountfrom=\"zfs:${pool}/ROOT/${new_bootfs}\" >> /${pool}/ROOT/${new_bootfs}/boot/loader.conf
        
        # fill the fstab with the mounts of the BE children
        grep -v ${pool}/ROOT/${bootfs} /etc/fstab > /${pool}/ROOT/${new_bootfs}/etc/fstab
        echo "# Automatically generated by manageBE (${pool}/ROOT/${new_bootfs})" >> /${pool}/ROOT/${new_bootfs}/etc/fstab
        for filesystem in `/sbin/zfs list -H -o name -t filesystem -r ${pool}/ROOT/${new_bootfs} | /usr/bin/sed s:${pool}/ROOT/${new_bootfs}:: | /usr/bin/sed s:^/:: | /usr/bin/xargs`; do
          echo "${pool}/ROOT/${new_bootfs}/${filesystem} /${filesystem} zfs rw 0 0" >> /${pool}/ROOT/${new_bootfs}/etc/fstab
        done

        echo "The new Boot-Environment is ready to be updated and/or activated."
    ;;
    delete)
        # delete a boot-environment

        shift; while getopts :n:p:o: arg; do case ${arg} in
            n) bootfs=${OPTARG};;
            p) pool=${OPTARG};;
            o) delete_origin=${OPTARG};;
            ?) exerr ${usage_delete};;
        esac; done; shift $(( ${OPTIND} - 1 ))

        [ "${bootfs}" -a "${pool}" -a "${delete_origin}" ] || exerr ${usage_delete}

        check_for_be_existence

        current_bootfs=`/sbin/zpool list -H -o bootfs ${pool}`

        if [ ! "${pool}/ROOT/${bootfs}" = "${current_bootfs}" ]; then
            if [ "${delete_origin}" = "yes" ]; then
               origin=`/sbin/zfs list -H -o origin ${pool}/ROOT/${bootfs}`
            fi
            /sbin/zfs destroy -r ${pool}/ROOT/${bootfs} || exerr ${error_delete}
            if [ "${delete_origin}" = "yes" -a "${origin}" ]; then
                /sbin/zfs destroy -r ${origin}
            fi
        else
            echo "${bootfs} is ZFS bootfs, unable to delete!"
        fi
    ;;
    list)
        shift; while getopts :v: arg; do
            verbose="YES";
        done; shift $(( ${OPTIND} - 1 ))

    rootfs=`mount | head -n1 | grep 'on / ' |cut -d ' ' -f1`
    for pool in `/sbin/zpool list -H -o name`; do
        echo "Poolname: $pool"
        zpool_bootfs=`/sbin/zpool list -H -o bootfs ${pool}`

        if [ "${zpool_bootfs}" = "-" ]; then
            echo "No BE setup"
            echo
            continue
        fi

        mountpoint_length=`/sbin/zfs list -H -o mountpoint -r $pool/ROOT | tail +2 |wc -L`
        if [ "$mountpoint_length" -lt "10" ]; then
            mountpoint_length=10
        fi
        name_length=`/sbin/zfs list -H -o name -r $pool/ROOT | tail +2 | /usr/bin/sed s:^$pool/ROOT/:: |wc -L`
        if [ "$name_length" -lt "4" ]; then
            name_length=4
        fi
        space_length=`/sbin/zfs list -H -o referenced -r $pool/ROOT | tail +2 |wc -L`
        if [ "$space_length" -lt "5" ]; then
            space_length=5
        fi
        snapshot_length=`/sbin/zfs list -t snapshot -H -o name -r $pool/ROOT | /usr/bin/sed s:^$pool/ROOT/::  | wc -L`

        printf "%-${name_length}s %-6s %-6s %-${mountpoint_length}s %-${space_length}s\\n" BE Active Active Mountpoint Space
        printf "%-${name_length}s %-6s %-6s %-${mountpoint_length}s %-${space_length}s\\n" Name Now Reboot - Used
        printf "%-${name_length}s %-6s %-6s %-${mountpoint_length}s %-${space_length}s\\n" ---- ------ ------ ---------- -----

        for be_filesystem in `/sbin/zfs list -H -S creation -o name -r $pool/ROOT |grep -v "^$pool/ROOT\$"`; do

            if [ `/sbin/zfs list -H -o freebsd:boot-environment ${be_filesystem}` = 1 ]; then
                be_name=`echo ${be_filesystem}|/usr/bin/sed s:^$pool/ROOT/::`

                be_active='no'	
                if [ "${be_filesystem}" = "${rootfs}" ]; then
                    be_active='yes'	
                fi
                be_nextboot='no'
                if [ "${be_filesystem}" = "${zpool_bootfs}" ]; then
                    be_nextboot='yes'
                fi

                if [ "${be_active}" = "yes" -a "${be_nextboot}" = "yes" ]; then
                  used_by_snapshots=`/sbin/zfs list -H -o usedbysnapshots $be_filesystem`
                  be_space=`/sbin/zfs list -H -o referenced $be_filesystem`
                  be_mountpoint='/'
                elif [ "${be_active}" = "no" -a "${be_nextboot}" = "yes" ]; then
                  used_by_snapshots=`/sbin/zfs list -H -o usedbysnapshots $be_filesystem`
                  be_space=`/sbin/zfs list -H -o referenced $be_filesystem`
                  be_mountpoint=`/sbin/zfs list -H -o mountpoint $be_filesystem`
                elif [ "${be_active}" = "yes" -a "${be_nextboot}" = "no" ]; then
                  be_origin=`/sbin/zfs list -H -o origin ${be_filesystem}`
                  be_space=`/sbin/zfs list -H -t snapshot -o used $be_origin`
                  be_mountpoint='/'
                else
                  be_origin=`/sbin/zfs list -H -o origin ${be_filesystem}`
                  be_space=`/sbin/zfs list -H -t snapshot -o used $be_origin`
                  be_mountpoint=`/sbin/zfs list -H -o mountpoint $be_filesystem`
                fi
                printf "%-${name_length}s %-6s %-6s %-${mountpoint_length}s %${space_length}s\\n" $be_name $be_active $be_nextboot $be_mountpoint $be_space

                if [ "$verbose" = "YES" ]; then
                    be_created=`/sbin/zfs list -H -S creation -o creation $be_filesystem`
                    echo
                    printf "\t%-${snapshot_length}s %-21s\\n" Name Created
                    printf "\t%-${snapshot_length}s %-21s\\n" $be_name "$be_created"
                    for snapshot_name in `/sbin/zfs list -t snapshot -H -r -o name $pool/ROOT/$be_name|/usr/bin/sed s:^$pool/ROOT/::`; do
                        snapshot_created=`/sbin/zfs list -t snapshot -H -S creation -o creation $pool/ROOT/$snapshot_name`
                        printf "\t%-${snapshot_length}s %-21s\\n" $snapshot_name "$snapshot_created"
                    done
                    echo
                fi
            fi
        done
        echo
        echo "Used by BE snapshots: ${used_by_snapshots}"
        echo
    done
    ;;
    src-upgrade)
        # upgrade a boot-environment

        shift; while getopts :n:p: arg; do case ${arg} in
            n) bootfs=${OPTARG};;
            p) pool=${OPTARG};;
            ?) exerr ${usage_src_upgrade};;
        esac; done; shift $(( ${OPTIND} - 1 ))

        [ "${bootfs}" -a "${pool}" ] || exerr ${usage_src_upgrade}

        check_for_be_existence

	mount -t nullfs -o ro /usr/src /${pool}/ROOT/${bootfs}/usr/src
	mount -t nullfs -o ro /usr/obj /${pool}/ROOT/${bootfs}/usr/obj

	echo '#!/bin/sh
mount -t devfs devfs /dev
cd /usr/src
make -s installkernel && make -s installworld && /usr/sbin/mergemaster -U
umount /dev' > /${pool}/ROOT/${bootfs}/tmp/manageBE-upgrade.sh

	chmod +x /${pool}/ROOT/${bootfs}/tmp/manageBE-upgrade.sh
	chroot /${pool}/ROOT/${bootfs}/ /tmp/manageBE-upgrade.sh
	rm /${pool}/ROOT/${bootfs}/tmp/manageBE-upgrade.sh
	umount /${pool}/ROOT/${bootfs}/usr/obj
	umount /${pool}/ROOT/${bootfs}/usr/src
	
	echo "Please activate ${bootfs} via manageBE and reboot."
    ;;
    freebsd-update)
        [ `uname -r | cut -d '-' -f1,2` = "8.0-RELEASE" ] && exerr ${not_supported}
        # update a boot-environment using freebsd-update

        shift; while getopts :n:p: arg; do case ${arg} in
            n) bootfs=${OPTARG};;
            p) pool=${OPTARG};;
            ?) exerr ${usage_freebsd_upgrade};;
        esac; done; shift $(( ${OPTIND} - 1 ))

        [ "${bootfs}" -a "${pool}" -a ${release} ] || exerr ${usage_freebsd_update}

        check_for_be_existence
        
        chroot /${bootfs} mount -t devfs devfs /dev
        chroot /${bootfs} /usr/sbin/freebsd-update fetch
        chroot /${bootfs} /usr/sbin/freebsd-update install > /dev/null
        chroot /${bootfs} umount /dev

        echo "Please activate ${bootfs} via manageBE and reboot."
    ;;
    freebsd-upgrade)
        [ `uname -r | cut -d '-' -f1,2` = "8.0-RELEASE" ] && exerr ${not_supported}
        # upgrade a boot-environment using freebsd-update

        shift; while getopts :n:p:r: arg; do case ${arg} in
            n) bootfs=${OPTARG};;
            p) pool=${OPTARG};;
            r) release=${OPTARG};;
            ?) exerr ${usage_freebsd_upgrade};;
        esac; done; shift $(( ${OPTIND} - 1 ))

        [ "${bootfs}" -a "${pool}" -a ${release} ] || exerr ${usage_freebsd_upgrade}

        check_for_be_existence
        
        chroot /${bootfs} mount -t devfs devfs /dev
        chroot /${bootfs} /usr/sbin/freebsd-update upgrade -r ${release}
        chroot /${bootfs} /usr/sbin/freebsd-update install > /dev/null
        chroot /${bootfs} umount /dev

        echo "Please activate ${bootfs} via manageBE and reboot. After rebooting, freebsd-update needs to be run again to install the new userland components, and the system needs to be rebooted again"
    ;;
    *)
        echo echo "Usage: ${mgm} [activate|create|delete|list|src-upgrade|freebsd-update|freebsd-upgrade] {params}"
    ;;
esac
